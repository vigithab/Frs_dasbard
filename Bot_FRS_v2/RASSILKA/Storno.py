import os
import time
import warnings
import pandas as pd
from Bot_FRS_v2.INI import rename, ini
import datetime
from Bot_FRS_v2.BOT_TELEGRAM import BOT
warnings.simplefilter("ignore", category=UserWarning, lineno=226, append=True)


class STORNO():
    def __init__(self):
        spqr, sprav_magaz, open_mag = rename.RENAME().magazin_info()
        sprav_magaz = sprav_magaz.loc[sprav_magaz["–†–∞–±–æ—Ç–∞—é—Ç –∏–ª–∏ –Ω–µ—Ç"]=="–î–µ–π—Å—Ç–≤—É—é—â–∏–µ"]
        self.spisok = sprav_magaz["ID"].tolist()
        while "–Ω–µ—Ç" in self.spisok:
            self.spisok.remove("–Ω–µ—Ç")
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ UTC
        end_date = datetime.datetime.utcnow()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è 5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –≤ UTC
        start_date = end_date - datetime.timedelta(days=35)

        self.date_dict = {}
        current_date = start_date
        while current_date <= end_date:
            formatted_date = current_date.strftime("%d.%m.%Y")
            unix_timestamp = int(current_date.timestamp() * 1000)

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É, –¥–æ–±–∞–≤–ª—è—è 1 –¥–µ–Ω—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ –≤ UTC
            next_day = current_date + datetime.timedelta(days=1)
            next_day_unix_timestamp = int(next_day.timestamp() * 1000)

            self.date_dict[formatted_date] = (unix_timestamp, next_day_unix_timestamp)
            current_date += datetime.timedelta(days=1)



    def storno(self, disk = None):

        if disk is not None:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
            date_object = datetime.datetime.strptime(disk, "%d.%m.%Y")
            # –ü–æ–ª—É—á–∞–µ–º Unix-–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            unix_timestamp = int(date_object.timestamp() * 1000)
            next_day = date_object + datetime.timedelta(days=1)
            next_day_unix_timestamp = int(next_day.timestamp() * 1000)
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
            self.date_dict = {
                disk: (unix_timestamp, next_day_unix_timestamp)}

        print(self.spisok)
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è –∏ –≤—ã–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è 1 –∏ 2 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
        for key in self.date_dict:
            df_itog = pd.DataFrame()
            value1, value2 = self.date_dict[key]
            print(f"–î–∞—Ç–∞: {key}, Unix-—Å—Ç–∞—Ä—Ç: {value1}, Unix-—Å—Ç–æ–ø: {value2}")

            for i in self.spisok:
                print(i)
                time.sleep(0.1)
                silka = pd.read_excel(f"http://10.32.2.51:8443/SetXRMI/ReportsProcessorServlet?Action=StornoReport&BEGIN=" \
                         f"{value1}&END={value2}&PURCHASE_ACTION_TYPE=STORNO&SHOP={i}&FILE_TYPE=XLSX",skiprows=6, engine='openpyxl')
                silka['–º–∞–≥–∞–∑–∏–Ω'] = i
                cols = list(silka.columns)
                cols = ['–º–∞–≥–∞–∑–∏–Ω'] + [col for col in cols if col != '–º–∞–≥–∞–∑–∏–Ω']
                silka = silka[cols]
                silka = silka.drop(columns=["Unnamed: 2","Unnamed: 5","Unnamed: 7","Unnamed: 9","Unnamed: 11","Unnamed: 13"])
                print(silka.head(5))
                df_itog = pd.concat([df_itog,silka],axis=0)
            df_itog.to_csv(ini.PUT + "Selenium\\–°—Ç–æ—Ä–Ω–æ\\–ò—Å—Ö–æ–¥–Ω–∏–∫–∏\\"+ f"{key}.csv",index=False)
            try:
                df_itog.to_csv( "P:\\–§–∏—Ä–º–µ–Ω–Ω–∞—è —Ä–æ–∑–Ω–∏—Ü–∞\\–§–†–°\\–î–∞–Ω–Ω—ã–µ –∏–∑ 1 –°\\–ß–µ–∫–∏_–°—Ç–æ—Ä–Ω–æ\\–ò—Å—Ö–æ–¥–Ω–∏–∫–∏\\" + f"{key}.csv", index=False)
            except:
                BOT.BOT().bot_mes_html(mes=f"üìõ –°—Ç–æ—Ä–Ω–æ –æ—à–∏–±–∫–∞ {key} –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –ø–∞–±–ª–∏–∫", silka=0)
            BOT.BOT().bot_mes_html(mes="‚úÖ"+f" –°—Ç–æ—Ä–Ω–æ {key} —Å–æ—Ö—Ä–∞–Ω–µ–Ω", silka=0)
    def strno_obrabotka_history(self):
        start = ini.PUT + "Selenium\\–°—Ç–æ—Ä–Ω–æ\\–ò—Å—Ö–æ–¥–Ω–∏–∫–∏\\"
        start_original = ini.PUT + "Selenium\\–ò—Å—Ö–æ–¥–Ω–∏–∫–∏\\"
        for filename in os.listdir(start):
            file_pach = os.path.join(start,filename)
            file_pach_original = os.path.join(start_original, filename[:-4]+".xlsx")
            print(file_pach_original)
            print(file_pach)
            def original():
                orig =pd.read_excel(file_pach_original)
                orig["–î–∞—Ç–∞/–í—Ä–µ–º—è —á–µ–∫–∞"] = pd.to_datetime(orig["–î–∞—Ç–∞/–í—Ä–µ–º—è —á–µ–∫–∞"],
                                                        format="%d.%m.%Y %H:%M:%S").dt.date
                orig =orig.loc[orig["–ú–∞–≥–∞–∑–∏–Ω"].notnull()]
                print(orig)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø –∏ —É–¥–∞–ª—è–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏ (.0)
                orig["ID_Chek"] = orig["–ú–∞–≥–∞–∑–∏–Ω"].astype(str).replace('\.0', '', regex=True) + \
                                 orig["–ö–∞—Å—Å–∞"].astype(str).replace('\.0', '', regex=True) + \
                                 orig["–ß–µ–∫"].astype(str).replace('\.0', '', regex=True) + \
                                 orig["–î–∞—Ç–∞/–í—Ä–µ–º—è —á–µ–∫–∞"].astype(str) + \
                                 orig["–°–º–µ–Ω–∞"].astype(str).replace('\.0', '', regex=True)


                return orig

            def storno():
                sto = pd.read_csv(file_pach,sep="\t",encoding="utf-8")
                sto["–î–∞—Ç–∞/–í—Ä–µ–º—è —á–µ–∫–∞"] = pd.to_datetime(sto["–î–∞—Ç–∞/–í—Ä–µ–º—è —á–µ–∫–∞"],
                                                                   format="%d.%m.%Y %H:%M:%S").dt.date
                sto = sto.loc[sto["–ú–∞–≥–∞–∑–∏–Ω"]!= "NaN"]
                print(sto)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø –∏ —É–¥–∞–ª—è–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏ (.0)
                sto["ID_Chek"] = sto["–ú–∞–≥–∞–∑–∏–Ω"].astype(str).replace('\.0', '', regex=True) + \
                                 sto["–ö–∞—Å—Å–∞"].astype(str).replace('\.0', '', regex=True) + \
                                 sto["–ß–µ–∫"].astype(str).replace('\.0', '', regex=True) + \
                                 sto["–î–∞—Ç–∞/–í—Ä–µ–º—è —á–µ–∫–∞"].astype(str).replace('\.0', '', regex=True) + \
                                 sto["–°–º–µ–Ω–∞"].astype(str).replace('\.0', '', regex=True)
                return sto
            original = original()
            print(original)

            storno = storno()
            print(storno)


if __name__ == '__main__':
    #STORNO().storno()
    STORNO().strno_obrabotka_history()