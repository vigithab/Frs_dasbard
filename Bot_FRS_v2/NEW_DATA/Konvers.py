import sys
sys.path.append(r"C:\Users\Lebedevvv\Desktop\FRS\PYTHON\venv\Lib\site-packages")
sys.path.append(r"C:\Users\Lebedevvv\Desktop\FRS\PYTHON")
import datetime
import locale
import os
import pandas as pd
from Bot_FRS_v2.INI import ini, Float, memory, rename
from Bot_FRS_v2.BOT_TELEGRAM import BOT

pd.set_option("expand_frame_repr", False)
pd.set_option('display.max_colwidth', None)

class konvers():
    def __init__(self):
        BOT.BOT().bot_mes_html(mes="‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏",
                               silka=0)
        print("–û—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏...")
        pd.set_option("expand_frame_repr", False)
        pd.set_option('display.max_colwidth', None)

    def selenium_day_chek(self, name_datafreme, name_file):
        name_datafreme = name_datafreme.rename(columns={"ID": "–ú–∞–≥–∞–∑–∏–Ω"})
        name_datafreme = name_datafreme.loc[name_datafreme["–ú–∞–≥–∞–∑–∏–Ω"].notnull()]
        # ######################################## –ó–∞–≥—É–∑–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Å 1 —Å
        spravka_nom = pd.read_csv(ini.PUT + "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏\\–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞\\–°–ø–∏—Å–æ–∫.txt", sep="\t",
                                  encoding="utf-8")
        spravka_nom = spravka_nom.rename(
            columns={"–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_1—Å", "–ö–æ–¥ SKU": "–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞"})
        # –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è—Å–æ–µ–¥–µ–Ω–µ–Ω–∏—è
        Float.FLOAT().float_colm(name_data=name_datafreme, name_col="–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞")
        name_datafreme["–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞"] = name_datafreme["–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞"].astype(int).astype(str)
        Float.FLOAT().float_colm(name_data=spravka_nom, name_col="–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞")
        spravka_nom["–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞"] = spravka_nom["–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞"].astype(int).astype(str)

        name_datafreme = name_datafreme.merge(spravka_nom[['–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_1—Å', "–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞"]],
                                                on=["–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞"], how="left").reset_index(drop=True)

        #####################################################################
        name_datafreme["–î–∞—Ç–∞/–í—Ä–µ–º—è —á–µ–∫–∞"] = pd.to_datetime(name_datafreme["–î–∞—Ç–∞/–í—Ä–µ–º—è —á–µ–∫–∞"],
                                               format="%d.%m.%Y %H:%M:%S").dt.date

        memory.MEMORY().mem_total(x="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:")
        name_datafreme["–ö–∞—Å—Å–∞"] = name_datafreme["–ö–∞—Å—Å–∞"].astype(str)
        name_datafreme = name_datafreme.loc[
            ~((name_datafreme["!–ú–ê–ì–ê–ó–ò–ù!"] == "–¢–∞–≤—Ä–∏—á–µ—Å–∫–∞—è 37") & (name_datafreme["–ö–∞—Å—Å–∞"] == "4.0"))]
        sp = ["–ö–∞—Å—Å–∞"]
        Float.FLOAT().float_colms(name_data=name_datafreme,name_col=sp)

        def cnevk_num(tip):
            df = name_datafreme[["–¢–∏–ø", "!–ú–ê–ì–ê–ó–ò–ù!","–ú–∞–≥–∞–∑–∏–Ω", "–î–∞—Ç–∞/–í—Ä–µ–º—è —á–µ–∫–∞", '–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_1—Å',"–ö–∞—Å—Å–∞",
                                 "–ß–µ–∫","–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏", "–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞", "–°–º–µ–Ω–∞",]]

            if tip=="–ü—Ä–æ–¥–∞–∂–∞":
                df = df.loc[(df["–¢–∏–ø"] == tip) | (df["–¢–∏–ø"] =="–í–æ–∑–≤—Ä–∞—Ç")]
                df = df.drop(["–¢–∏–ø"], axis=1)
            else:
                df = df.loc[(df["–¢–∏–ø"] == tip)]
                df = df.drop(["–¢–∏–ø"], axis=1)

            df["–î–∞—Ç–∞/–í—Ä–µ–º—è —á–µ–∫–∞"] = pd.to_datetime(df["–î–∞—Ç–∞/–í—Ä–µ–º—è —á–µ–∫–∞"],
                                                               format="%d.%m.%Y %H:%M:%S").dt.date
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ ID –ß–µ–∫–∞
            df["ID_Chek"] = df["–ú–∞–≥–∞–∑–∏–Ω"].astype(int).astype(str) + \
                                        df["–ö–∞—Å—Å–∞"].astype(int).astype(str) + \
                                        df["–ß–µ–∫"].astype(int).astype(
                str) + df["–î–∞—Ç–∞/–í—Ä–µ–º—è —á–µ–∫–∞"].astype(str) + df["–°–º–µ–Ω–∞"].astype(str)
            df = df.drop(["–ö–∞—Å—Å–∞", "–ß–µ–∫","–°–º–µ–Ω–∞"], axis=1)

            nom_list = df['–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_1—Å'].unique().tolist()
            df_itog = pd.DataFrame()
            for i in nom_list:
                df_filter = df.loc[df['–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_1—Å'] == i ]
                # –≥—Ä—É–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
                df_filter = df_filter.groupby(["–î–∞—Ç–∞/–í—Ä–µ–º—è —á–µ–∫–∞", "–ú–∞–≥–∞–∑–∏–Ω",'–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_1—Å',"!–ú–ê–ì–ê–ó–ò–ù!"],
                                              as_index=False) \
                    .agg({'ID_Chek': "nunique"}).reset_index(drop=True)
                if tip =="–ü—Ä–æ–¥–∞–∂–∞":
                    df_filter = df_filter.rename(columns={'ID_Chek':"–í—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å —Ä–∞–∑ –≤ —á–µ–∫–∞—Ö"})
                else:
                    df_filter = df_filter.rename(columns={'ID_Chek': "–í–æ–∑–≤—Ä–∞—Ç —Ä–∞–∑ –≤ —á–µ–∫–∞—Ö"})
                df_itog = pd.concat([df_itog,  df_filter], axis=0)
            return df_itog


        df_itog = cnevk_num(tip="–ü—Ä–æ–¥–∞–∂–∞")
        vozvrat = cnevk_num(tip="–í–æ–∑–≤—Ä–∞—Ç")

        df_itog = df_itog.merge(vozvrat[["–í–æ–∑–≤—Ä–∞—Ç —Ä–∞–∑ –≤ —á–µ–∫–∞—Ö",'–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_1—Å',"–ú–∞–≥–∞–∑–∏–Ω"]],
                                on=['–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_1—Å',"–ú–∞–≥–∞–∑–∏–Ω"], how="left").reset_index(drop=True)
        df_itog  = df_itog .rename(columns={"–ú–∞–≥–∞–∑–∏–Ω": "ID"})
        df_itog = df_itog[["–î–∞—Ç–∞/–í—Ä–µ–º—è —á–µ–∫–∞","ID","!–ú–ê–ì–ê–ó–ò–ù!","–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_1—Å","–í—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å —Ä–∞–∑ –≤ —á–µ–∫–∞—Ö",
                           "–í–æ–∑–≤—Ä–∞—Ç —Ä–∞–∑ –≤ —á–µ–∫–∞—Ö"]]
        date_obj = name_file[:-5]
        date_obj = datetime.datetime.strptime(date_obj, "%d.%m.%Y").date()

        try:
            year = str(date_obj.year)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–¥–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
            old_locale = locale.getlocale(locale.LC_TIME)
            locale.setlocale(locale.LC_TIME, 'ru_RU')
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
            month = date_obj.strftime('%B')
            # –≤–µ—Ä–Ω—É—Ç—å –ª–æ–∫–∞–ª—å
            locale.setlocale(locale.LC_TIME, old_locale)

            base_dir ="P:\\–§–∏—Ä–º–µ–Ω–Ω–∞—è —Ä–æ–∑–Ω–∏—Ü–∞\\–§–†–°\\–î–∞–Ω–Ω—ã–µ –∏–∑ SetRetail\\–ö–æ–Ω–≤–µ—Ä—Å–∏—è\\–ü–æ_–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ\\"

            # –°–æ—á–µ—Ç–∞–Ω–∏–µ –≥–æ–¥–∞ –∏ –º–µ—Å—è—Ü–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–π —Å–∏–º–≤–æ–ª–æ–º '/'
            year_month_dir = os.path.join(base_dir, f"{year}\\{month}\\")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞–ø–∫–∏ –≥–æ–¥–∞-–º–µ—Å—è—Ü–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if not os.path.exists(year_month_dir):
                os.makedirs(year_month_dir)

            df_itog.to_csv(year_month_dir + f"{str(name_file)[:-5]}_num.csv", index=False)

        except:
            zx = "üìõ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"
            print(zx)
            BOT.BOT().bot_mes_html(mes=zx, silka=0)
        return

konvers().selenium_day_chek()